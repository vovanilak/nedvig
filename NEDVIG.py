from aiogram import Bot, Dispatcher, filters, Router, F
from aiogram.filters import StateFilter
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import FSInputFile
from data.book import nedvig
from aiogram import types
import logging
import os
import asyncio
import dotenv
from keyboard.builders import *

dotenv.load_dotenv()
token = os.getenv('BOT_TOKEN')
bot = Bot(token=token)
dp = Dispatcher()
user_dict = {}


class Regre_form(StatesGroup):
  nomen = State()
  main = State()
  money = State()


class Anket(StatesGroup):
  sity = State()
  house = State()
  square = State()
  rooms = State()
  live = State()
  trebonia = State()
  Money = State()
  nomber = State()
  named = State()
  info = State()


class seld(StatesGroup):
  CITY = State()
  adres = State()
  room = State()
  metrage = State()
  flor = State()
  telephon = State()
  IMYA = State()
  end = State()


#class BUY(StatesGroup):
class TELETHON(StatesGroup):
  imya = State()
  telephone = State()
  tel = State()
  why = State()


@dp.message(Command('getid'))
async def get_id(message: Message):
  await message.answer(str(message.chat.id))


@dp.message(Command('start'))
async def kso(message: Message, state: FSMContext):
  builder = ReplyKeyboardBuilder()
  btn1 = types.KeyboardButton(text="–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
  btn2 = types.KeyboardButton(text="–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
  btn3 = types.KeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
  btn4 = types.KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
  btn5 = types.KeyboardButton(text="–¢–ì –∫–∞–Ω–∞–ª")
  btn6 = types.KeyboardButton(text="–û –∫–æ–º–ø–∞–Ω–∏–∏")
  builder.add(btn1, btn2, btn3, btn4, btn5, btn6)
  builder.adjust(2)
  await message.answer(
      "–ü—Ä–∏–≤–µ—Ç —è —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ/–ø—Ä–æ–¥–∞–∂–∏/–ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ,—á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register",
      reply_markup=builder.as_markup(resize_keyboard=True))


@dp.message(F.text.in_(nedvig.keys()))
async def book_info(message: types.Message, state: FSMContext):
  txt = message.text
  dct = await state.get_data()
  print(dct)
  if txt in ("–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
             "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏") and 'city' in dct:
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å‚ùì',
                         reply_markup=inline_kb([
                             "–ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫üì±", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìï"
                         ]))
  elif txt == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
    await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–πüì≤",
                         reply_markup=inline_btn("–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–πüíª",
                                                 nedvig["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]))
  elif txt == "–¢–ì –∫–∞–Ω–∞–ª":
    await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¢–ì –∫–∞–Ω–∞–ªüîî ",
                         reply_markup=inline_btn("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ªüì≤",
                                                 "https://t.me/nedvig777"))
  elif txt == "–û –∫–æ–º–ø–∞–Ω–∏–∏":
    send = nedvig["–û –∫–æ–º–ø–∞–Ω–∏–∏"]
    await message.answer(send)
  else:
    await message.answer(
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /register"
    )


    #–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
@dp.message(F.data.in_("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìï"))  ########–ü–†–û–ë–õ–ï–ú–ê
async def ddsjds(message: Message, state: FSMContext):
  await message.answer(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")


@dp.message(seld.CITY)
async def kdlfkdlfk(message: types.Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥")
  await state.update_data(CITYY=message.text)
  await state.set_state(seld.adres)


@dp.message(seld.adres)
async def dfdfkd(message: types.Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
  await state.update_data(adress=message.text)
  await state.set_state(seld.room)


@dp.message(seld.room)
async def sdksldk(message: types.Message, state: FSMContext):
  await message.asnwer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –∫–æ–º–Ω–∞—Ç?",
                       reply_murkup=inline_kb["1", "2", "3", "4", "5", "6"])
  await state.set_state(seld.metrage)  #—Å–ø—Ä–æ—Å–∏—Ç—å


@dp.callback_query(seld.metrage)
async def sdjksj(callback: CallbackQuery, state: FSMContext):
  await callback.message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ —É –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏?")
  await state.update_data(metragee=callback.message.text)
  await state.set_state(seld.flor)


@dp.message(seld.flor)
async def dfkdslfdf(message: types.Message, state: FSMContext):
  await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —ç—Ç–∞–∂–µ–π?",
                       reply_markup=inline_kb["1", "2", "3", "4"])
  await state.update_data(florr=message.text)
  await state.set_state(seld.telephon)


@dp.callback_query(seld.telephon)
async def fldjsfja(callback: CallbackQuery, state: FSMContext):
  await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
  await state.update_data(telethonn=callback.message.text)
  await state.set_state(seld.IMYA)


@dp.message(seld.IMYA)
async def ddkfdfd(message: Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
  await state.update_data(IMYAA=message.text)
  await state.set_state(seld.end)


@dp.message(seld.end)
async def end_state(message: Message, state: FSMContext):
  await message.answer(
      "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞,—Å–ø–∞—Å–∏–±–æ!–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /see,–∞ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –ª–æ–±–±–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
  )
  await state.update_data(endd=message.text)
  await state.set_state(default_state())


@dp.callback_query(F.data.in_(("–ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫üì±")))
async def djfdjiffdj(callback: CallbackQuery, state: FSMContext):
  await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
  await state.update_data(imyaa=callback.message.text)
  await state.set_state(TELETHON.telephone)


@dp.message(TELETHON.telephone)
async def jrigrjghig(message: Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
  await state.update_data(telethonee=message.text)
  await state.set_state(TELETHON.tel)


@dp.message(TELETHON.tel)
async def tel_state(message: Message, state: FSMContext):
  await message.answer(f"–ù–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π?\n{message.text}",
                       reply_markup=inline_kb(["–î–∞", "–ù–µ—Ç"]))
  await state.update_data(tell=message.text)
  await state.set_state(TELETHON.why)

@dp.callback_query(TELETHON.why)
async def sjdsjdksjk(callback: CallbackQuery, state: FSMContext):
  await callback.message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä –≤–µ—Ä–Ω—ã–π?\n{callback.message.text}")

@dp.message(filters.StateFilter(TELETHON.why))
async def age_state(message, state):
  await state.update_data(know=message.text)
  await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
                       '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
  await message.answer('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π '
                       '–∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /look')
  await state.set_state(default_state)


@dp.message(filters.Command("look"), filters.StateFilter(default_state))
async def showdata(MSG):
  infoo = f"–ò–º—è: {user_dict[MSG.from_user.id]['name']}\n\
–¢–µ–ª–µ—Ñ–æ–Ω:{user_dict[MSG.from_user.id]['nomer']}"

  await MSG.answer(infoo)

  #resume={}
  #dct=await state.get_data()
  #for dddd in ["imyaa","telethonee"]:
  #resume.update({dddd:dct[dddd]})
  #await bot.send_message(chat_id=int(os.getenv('ADMIN')), text=str(resume))


@dp.callback_query(F.data.in_(("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìï")))
async def ggg(callback: CallbackQuery, state: FSMContext):
  await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥")
  await state.set_state(Anket.sity)


@dp.message(filters.StateFilter(Anket.sity))
async def name(message: types.Message, state: FSMContext):
  await state.update_data(ccity=message.text)
  await message.answer("–°–ø–∞—Å–∏–±–æ,–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏–ª–∏ –¥–æ–º?",
                       reply_markup=inline_kb(["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º"]))
  await state.set_state(Anket.house)


@dp.callback_query(Anket.house, F.data.in_(["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º"]))
async def dded(callback: CallbackQuery, state: FSMContext):
  await state.update_data(housee=callback.data)
  await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å")
  await callback.answer()  #—É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–Ω–æ–ø–∫–∏
  await state.set_state(Anket.square)


@dp.message(Anket.house)
async def dded_error(message: Message):
  await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                       reply_markup=inline_kb(["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º"]))


@dp.message(Anket.square)
async def sddd(message: types.Message, state: FSMContext):
  await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?",
                       reply_markup=inline_kb(['1', '2', '3', '4', '5', '6']))
  await state.update_data(roomss=message.text)
  await state.set_state(Anket.live)


@dp.callback_query(F.data.in_(['1', '2', '3', '4', '5', '6']), Anket.live)
async def dds(callback: CallbackQuery, state: FSMContext):
  await callback.message.answer("–î–ª—è –∫–æ–≥–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å? –ö—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å?")
  await state.update_data(livee=callback.message.text)
  await state.set_state(Anket.trebonia)


@dp.message(Anket.live)
async def dded_error(message: Message):
  await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                       reply_markup=inline_kb(['1', '2', '3', '4', '5', '6']))


@dp.message(Anket.trebonia)
async def djfijf(message: Message, state: FSMContext):
  await message.answer("–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É?"
                       )  ###–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–Ω–ª–∞–π–Ω
  await state.update_data(trebovaniaa=message.text)
  await state.set_state(Anket.Money)


@dp.message(Anket.Money)
async def pfefk(message: Message, state: FSMContext):
  await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏üî¢")
  await state.update_data(Moneyy=message.text)
  await state.set_state(Anket.nomber)


@dp.message(Anket.nomber, F.text.isdigit())
async def edeofeokd(message: Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
  await state.update_data(nomderr=message.text)
  await state.set_state(Anket.named)


@dp.message(Anket.nomber)
async def dkddf(message):
  await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


@dp.message(Anket.named)
async def dfjfke(message: Message, state: FSMContext):
  await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
  await state.update_data(nameeee=message.text)
  await state.set_state(Anket.info)

  #result={}
  #dct=await state.get_data()
  #for dddd in ["ccity","housee","roomss","livee","trebovaniaa","Moneyy","nomderr","nameeee"]:
  #result.update({dddd:dct[dddd]})
  #await bot.send_message(chat_id=int(os.getenv('ADMIN')), text=str(result))
  #await message.answer("–°–ø–∞—Å–∏–±–æ —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è,–Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /saw,—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


@dp.message(filters.StateFilter(Anket.info))
async def name_state(message, state):
  await state.update_data(namee=message.text)
  #user_dict[message.from_user.id]=await state.get_data()
  await state.clear()
  await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
                       '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
  await message.answer('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π '
                       '–∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /see')
  await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                       reply_markup=form_without(nedvig.keys())
                       )  ###–í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
  await state.set_state(default_state)


@dp.message(filters.Command("see"), filters.StateFilter(default_state))
async def showdata(message: Message, state: FSMContext):
  '''#infoo=f"–ì–æ—Ä–æ–¥: {user_dict[MSG.from_user.id]['']}\n\
:{user_dict[MSG.from_user.id]['']}\n\
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}
:{user_dict[MSG.from_user.id]['']}'''

  #await MSG.answer(infoo)
  await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                       reply_markup=form_without(nedvig.keys()))


@dp.message(filters.Command("cancel"), ~filters.StateFilter(default_state))
async def default_cancel(MSG, state):
  await MSG.answer("'–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'"
                   '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã - '
                   "'–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /register'")


@dp.message(filters.Command("cancel"), filters.StateFilter(default_state))
async def default_cancel(MSG):
  await MSG.answer("–æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ,–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /register")


@dp.message(filters.Command("register"))
async def mess(message: Message, state: FSMContext):
  await message.answer("–ü—Ä–∏–≤–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
  await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
  await state.set_state(Regre_form.nomen)


@dp.message(filters.StateFilter(Regre_form.nomen), F.text.isalpha())
async def reg_phone(message: types.Message, state: FSMContext):
  await state.update_data(name=message.text)
  await message.answer("–°–ø–∞—Å–∏–±–æ,–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
  await state.set_state(Regre_form.main)


@dp.message(filters.StateFilter(Regre_form.main))
async def reg_city(message: types.Message, state: FSMContext):
  await state.update_data(nomer=message.text)
  await message.answer("–°–ø–∞—Å–∏–±–æ,–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞")
  await state.set_state(Regre_form.money)


@dp.message(filters.StateFilter(Regre_form.money))
async def age_state(message, state):
  await state.update_data(city=message.text)
  await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n'
                       '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
  await message.answer('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π '
                       '–∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /see')
  await state.set_state(default_state)


@dp.message(filters.Command("see"), filters.StateFilter(default_state))
async def showdata(MSG):
  info = f"–ò–º—è: {user_dict[MSG.from_user.id]['name']}\n\
–¢–µ–ª–µ—Ñ–æ–Ω:{user_dict[MSG.from_user.id]['nomer']}\n\
–ì–æ—Ä–æ–¥:{user_dict[MSG.from_user.id]['city']}"

  await MSG.answer(info)


async def main():
  await bot.delete_webhook(drop_pending_updates=True)
  await dp.start_polling(bot)


if __name__ == "__main__":
  logging.basicConfig(level=logging.INFO)
  asyncio.run(main())
