!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/vova/py/nedvig/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
Anket	data/states.py	/^class Anket(StatesGroup):$/;"	c
AntiFloodMiddleware	middlewares/antiflood.py	/^class AntiFloodMiddleware(BaseMiddleware):$/;"	c
Base	db/create.py	/^Base = declarative_base()$/;"	v
CheckAdmin	filters/repeat.py	/^class CheckAdmin(MagicFilter):$/;"	c
CheckRegistration	filters/filter.py	/^class CheckRegistration(Filter):$/;"	c
CheckRepeat	filters/repeat.py	/^class CheckRepeat(Filter):$/;"	c
Regre_form	data/states.py	/^class Regre_form(StatesGroup):                   $/;"	c
Sell	data/states.py	/^class Sell(StatesGroup):$/;"	c
TELEPHONE	data/states.py	/^class TELEPHONE(StatesGroup):$/;"	c
TOKEN	main.py	/^TOKEN = getenv("BOT_TOKEN")$/;"	v
Users	db/create.py	/^class Users(Base):$/;"	c
__call__	filters/filter.py	/^    async def __call__(self, message: Message, state: FSMContext):$/;"	m	class:CheckRegistration
__call__	filters/repeat.py	/^    async def __call__ (self, message: Message):$/;"	m	class:CheckAdmin
__call__	filters/repeat.py	/^    async def __call__ (self, message: Message, state: FSMContext):#действия после /;"	m	class:CheckRepeat
__call__	middlewares/antiflood.py	/^    async def __call__(self, handler, event: Message, data):$/;"	m	class:AntiFloodMiddleware
__init__	filters/filter.py	/^    def __init__(self, my_text):$/;"	m	class:CheckRegistration
__init__	filters/repeat.py	/^    def __init__(self, stage):#переменные каторые будут использов/;"	m	class:CheckRepeat
__init__	middlewares/antiflood.py	/^    def __init__(self, time_limit = 0.5) -> None:$/;"	m	class:AntiFloodMiddleware	typeref:typename:None
__tablename__	db/create.py	/^    __tablename__ = 'users'$/;"	v	class:Users	file:
add_info	db/info.py	/^async def add_info(dct: dict):$/;"	f
add_n_send	utils/info.py	/^async def add_n_send($/;"	f
admin_excel	handlers/admin.py	/^async def admin_excel(message: Message):$/;"	f
admin_exit	handlers/admin.py	/^async def admin_exit(message: Message):$/;"	f
adress	data/states.py	/^    adress = State()$/;"	v	class:Sell
age_state	handlers/registration.py	/^async def age_state(message,state):$/;"	f
anket_city	db/create.py	/^    anket_city = Column(String(50))$/;"	v	class:Users
anket_house	db/create.py	/^    anket_house = Column(String(20))$/;"	v	class:Users
anket_live	db/create.py	/^    anket_live = Column(String(200))$/;"	v	class:Users
anket_money	db/create.py	/^    anket_money = Column(Integer)$/;"	v	class:Users
anket_name	db/create.py	/^    anket_name = Column(String(50))$/;"	v	class:Users
anket_phone	db/create.py	/^    anket_phone = Column(String(20))$/;"	v	class:Users
anket_rooms	db/create.py	/^    anket_rooms = Column(Integer)$/;"	v	class:Users
anket_square	db/create.py	/^    anket_square = Column(Integer)$/;"	v	class:Users
anket_trebovania	db/create.py	/^    anket_trebovania = Column(String(200))$/;"	v	class:Users
ask_continue_old	handlers/contin.py	/^async def ask_continue_old(callback: CallbackQuery, state: FSMContext):$/;"	f
ask_rewrite	handlers/contin.py	/^async def ask_rewrite(message: Message, state: FSMContext):$/;"	f
book_info	handlers/contin.py	/^async def book_info(message: Message,state: FSMContext):$/;"	f
chat_id	db/create.py	/^    chat_id = Column(Integer, nullable=False)$/;"	v	class:Users
city	data/states.py	/^    city = State()$/;"	v	class:Anket
city	data/states.py	/^    city = State()$/;"	v	class:Regre_form
city	data/states.py	/^    city = State()$/;"	v	class:Sell
create_table	db/create.py	/^def create_table():$/;"	f
dp	main.py	/^dp = Dispatcher()$/;"	v
end	data/states.py	/^    end = State()$/;"	v	class:Anket
end	data/states.py	/^    end = State()$/;"	v	class:Regre_form
end	data/states.py	/^    end = State()$/;"	v	class:Sell
end	data/states.py	/^    end = State()$/;"	v	class:TELEPHONE
end_anket	handlers/arenda_buy.py	/^async def end_anket(callback: CallbackQuery, state: FSMContext):$/;"	f
end_anket	handlers/error.py	/^async def end_anket(callback: CallbackQuery, state: FSMContext):$/;"	f
end_anket_error	handlers/arenda_buy.py	/^async def end_anket_error(callback: CallbackQuery):$/;"	f
floor	data/states.py	/^    floor = State()$/;"	v	class:Sell
form	keyboard/builders.py	/^def form(frog):$/;"	f
form_without	keyboard/builders.py	/^def form_without(frog):$/;"	f
get_id	handlers/start.py	/^async def get_id(message: Message):$/;"	f
getsecretinfo	handlers/admin.py	/^async def getsecretinfo(message: Message):$/;"	f
house	data/states.py	/^    house = State()$/;"	v	class:Anket
id	db/create.py	/^    id = Column(Integer, primary_key=True, nullable=False)$/;"	v	class:Users
info	archive/code.py	/^info = f"""Город: {user_dict['anket_city']}\\n$/;"	v
info	data/states.py	/^    info = State()$/;"	v	class:Anket
info	data/states.py	/^    info = State()$/;"	v	class:Regre_form
info	data/states.py	/^    info = State()$/;"	v	class:Sell
info	data/states.py	/^    info = State()$/;"	v	class:TELEPHONE
inline_btn	keyboard/builders.py	/^def inline_btn(txt,ur):$/;"	f
inline_kb	keyboard/builders.py	/^def inline_kb(btns):$/;"	f
is_arenda	db/create.py	/^    is_arenda = Column(Integer)$/;"	v	class:Users
is_buy	db/create.py	/^    is_buy = Column(Integer) # default=0$/;"	v	class:Users
is_reg	db/create.py	/^    is_reg=Column(Integer)$/;"	v	class:Users
is_sell	db/create.py	/^    is_sell = Column(Integer)$/;"	v	class:Users
is_tele	db/create.py	/^    is_tele = Column(Integer)$/;"	v	class:Users
live	data/states.py	/^    live=State()$/;"	v	class:Anket
main	main.py	/^async def main():$/;"	f
main_error	handlers/error.py	/^async def main_error(message: Message, state: FSMContext):$/;"	f
metrage	data/states.py	/^    metrage = State()$/;"	v	class:Sell
money	data/states.py	/^    money = State()$/;"	v	class:Anket
name	data/states.py	/^    name = State()$/;"	v	class:Anket
name	data/states.py	/^    name = State()$/;"	v	class:Sell
name	data/states.py	/^    name = State()$/;"	v	class:TELEPHONE
name	db/create.py	/^    name = Column(String(250))$/;"	v	class:Users
nedvig	data/book.py	/^nedvig = {$/;"	v
number	data/states.py	/^    number = State()$/;"	v	class:Anket
number	data/states.py	/^    number = State()$/;"	v	class:Regre_form
pd	db/info.py	/^import pandas as pd$/;"	I	nameref:module:pandas
phone_continue_old	handlers/contin.py	/^async def phone_continue_old(callback: CallbackQuery, state: FSMContext):$/;"	f
read_table	db/info.py	/^async def read_table():$/;"	f
reg_city	db/create.py	/^    reg_city = Column(String(50))$/;"	v	class:Users
reg_city	handlers/registration.py	/^async def reg_city(message: Message, state: FSMContext):$/;"	f
reg_end	handlers/registration.py	/^async def reg_end(callback: CallbackQuery, state: FSMContext):$/;"	f
reg_name	db/create.py	/^    reg_name = Column(String(100))$/;"	v	class:Users
reg_nomer	db/create.py	/^    reg_nomer = Column(String(20))$/;"	v	class:Users
reg_phone	handlers/registration.py	/^async def reg_phone(message: Message, state: FSMContext):$/;"	f
rewrite_callback	handlers/contin.py	/^async def rewrite_callback(callback: CallbackQuery, state: FSMContext):$/;"	f
room	data/states.py	/^    room = State()$/;"	v	class:Sell
rooms	data/states.py	/^    rooms = State()$/;"	v	class:Anket
router	handlers/admin.py	/^router = Router()$/;"	v
router	handlers/arenda_buy.py	/^router = Router()$/;"	v
router	handlers/contin.py	/^router=Router()$/;"	v
router	handlers/error.py	/^router = Router()$/;"	v
router	handlers/phone.py	/^router=Router()$/;"	v
router	handlers/registration.py	/^router = Router()$/;"	v
router	handlers/repeat_sell.py	/^router=Router()$/;"	v
router	handlers/sell.py	/^router=Router()$/;"	v
router	handlers/start.py	/^router=Router()$/;"	v
router_y	handlers/repeat_sell.py	/^async def router_y(message: Message, state: FSMContext):$/;"	f
router_y_callback	handlers/repeat_sell.py	/^async def router_y_callback(callback: CallbackQuery, state: FSMContext):$/;"	f
sell_adress	db/create.py	/^    sell_adress = Column(String(200))$/;"	v	class:Users
sell_city	db/create.py	/^    sell_city = Column(String(50))$/;"	v	class:Users
sell_end	handlers/sell.py	/^async def sell_end(callback: CallbackQuery, state: FSMContext):$/;"	f
sell_end_error	handlers/sell.py	/^async def sell_end_error(callback: CallbackQuery):$/;"	f
sell_floor	db/create.py	/^    sell_floor = Column(Integer)$/;"	v	class:Users
sell_metrage	db/create.py	/^    sell_metrage = Column(Integer)$/;"	v	class:Users
sell_name	db/create.py	/^    sell_name = Column(String(50))$/;"	v	class:Users
sell_phone	db/create.py	/^    sell_phone = Column(String(20))$/;"	v	class:Users
sell_room	db/create.py	/^    sell_room = Column(Integer)$/;"	v	class:Users
square	data/states.py	/^    square = State()$/;"	v	class:Anket
stage_anket_adress	handlers/sell.py	/^async def stage_anket_adress(message: Message, state: FSMContext):$/;"	f
stage_anket_city	handlers/arenda_buy.py	/^async def stage_anket_city(message: Message, state: FSMContext):$/;"	f
stage_anket_city	handlers/sell.py	/^async def stage_anket_city(message: Message, state: FSMContext):$/;"	f
stage_anket_floor	handlers/sell.py	/^async def stage_anket_floor(message: Message, state: FSMContext):$/;"	f
stage_anket_floor_error	handlers/sell.py	/^async def stage_anket_floor_error(message: Message):$/;"	f
stage_anket_house	handlers/arenda_buy.py	/^async def stage_anket_house(callback: CallbackQuery, state: FSMContext):$/;"	f
stage_anket_house_error	handlers/arenda_buy.py	/^async def stage_anket_house_error(message: Message):$/;"	f
stage_anket_info	handlers/arenda_buy.py	/^async def stage_anket_info(message,state):$/;"	f
stage_anket_live	handlers/arenda_buy.py	/^async def stage_anket_live(callback: CallbackQuery, state: FSMContext):$/;"	f
stage_anket_live_error	handlers/arenda_buy.py	/^async def stage_anket_live_error(message: Message):$/;"	f
stage_anket_metrage	handlers/sell.py	/^async def stage_anket_metrage(message: Message, state: FSMContext):$/;"	f
stage_anket_metrage_error	handlers/sell.py	/^async def stage_anket_metrage_error(message: Message):$/;"	f
stage_anket_money	handlers/arenda_buy.py	/^async def stage_anket_money(message: Message, state: FSMContext):$/;"	f
stage_anket_name	handlers/arenda_buy.py	/^async def stage_anket_name(message: Message, state: FSMContext):$/;"	f
stage_anket_name	handlers/sell.py	/^async def stage_anket_name(message: Message, state: FSMContext):$/;"	f
stage_anket_number	handlers/arenda_buy.py	/^async def stage_anket_number(message: Message, state: FSMContext):$/;"	f
stage_anket_number_error	handlers/arenda_buy.py	/^async def stage_anket_number_error(message):$/;"	f
stage_anket_room	handlers/sell.py	/^async def stage_anket_room(callback: CallbackQuery, state: FSMContext):$/;"	f
stage_anket_room_error	handlers/sell.py	/^async def stage_anket_room_error(callback: CallbackQuery, state: FSMContext):$/;"	f
stage_anket_square	handlers/arenda_buy.py	/^async def stage_anket_square(message: Message, state: FSMContext):$/;"	f
stage_anket_square_error	handlers/arenda_buy.py	/^async def stage_anket_square_error(message: Message):$/;"	f
stage_anket_telephone	handlers/sell.py	/^async def stage_anket_telephone(message: Message, state: FSMContext):$/;"	f
stage_anket_trebonia	handlers/arenda_buy.py	/^async def stage_anket_trebonia(message: Message, state: FSMContext):$/;"	f
stage_continue_old	handlers/contin.py	/^async def stage_continue_old(message: Message, state: FSMContext):$/;"	f
stage_phone_end	handlers/phone.py	/^async def stage_phone_end(message: Message, state: FSMContext):$/;"	f
stage_phone_telephone	handlers/phone.py	/^async def stage_phone_telephone(message: Message, state: FSMContext):$/;"	f
start_command	handlers/start.py	/^async def start_command(message: Message):$/;"	f
start_command_old	handlers/start.py	/^async def start_command_old(message: Message, state: FSMContext):$/;"	f
state_info	utils/info.py	/^async def state_info(state_name: str, state: FSMContext):$/;"	f
tele_name	db/create.py	/^    tele_name = Column(String(100))$/;"	v	class:Users
tele_phone	db/create.py	/^    tele_phone = Column(String(20))$/;"	v	class:Users
telephone	data/states.py	/^    telephone = State()$/;"	v	class:Sell
telephone	data/states.py	/^    telephone = State()$/;"	v	class:TELEPHONE
time_updated	db/create.py	/^    time_updated = Column(Float)$/;"	v	class:Users
trebonia	data/states.py	/^    trebonia = State()$/;"	v	class:Anket
want	db/create.py	/^    want = Column(String(50))$/;"	v	class:Users
