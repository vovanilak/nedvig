from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message
from data.states import Anket
from aiogram import Router, F
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from keyboard import builders
from aiogram.types import CallbackQuery
from aiogram.types import ReplyKeyboardRemove
from filters.repeat import CheckRepeat
import os
from dotenv import load_dotenv
from keyboard.builders import *
from data.book import nedvig
from db.info import *
import time

load_dotenv()

router = Router()

@router.message(Anket.city)
async def stage_anket_city(message: Message, state: FSMContext):
    await state.set_state(Anket.house)
    await state.update_data(anket_city=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏–ª–∏ –¥–æ–º?",
                         reply_markup=inline_kb(["–ö–≤–∞—Ä—Ç–∏—Ä–∞","–î–æ–º"]))

@router.callback_query(Anket.house, F.data.in_(["–ö–≤–∞—Ä—Ç–∏—Ä–∞","–î–æ–º"]))
async def stage_anket_house(callback: CallbackQuery, state: FSMContext):
    await state.update_data(anket_house=callback.data)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö")
    await callback.answer()#—É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–Ω–æ–ø–∫–∏
    await state.set_state(Anket.square)
    
@router.message(Anket.house)
async def stage_anket_house_error(message: Message):
    await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                         reply_markup=inline_kb(["–ö–≤–∞—Ä—Ç–∏—Ä–∞","–î–æ–º"]))
    
@router.message(Anket.square,F.text.isdigit())
async def stage_anket_square(message: Message, state: FSMContext):
    await state.set_state(Anket.live)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?",
                         reply_markup=inline_kb(['1','2','3','4','5','6']))
    await state.update_data(anket_square=message.text)
@router.message(Anket.square)
async def stage_anket_square_error(message: Message):
    await message.answer("–ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã,–≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
@router.callback_query(Anket.live, F.data.in_(['1','2','3','4','5','6']))
async def stage_anket_live(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–ª—è –∫–æ–≥–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å? –ö—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å?")
    await state.update_data(anket_rooms=int(callback.data))
    await callback.answer()
    await state.set_state(Anket.trebonia)
    
@router.message(Anket.live)
async def stage_anket_live_error(message: Message):
    await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                         reply_markup=inline_kb(['1','2','3','4','5','6']))
    
@router.message(Anket.trebonia)
async def stage_anket_trebonia(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É?")###–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–Ω–ª–∞–π–Ω
    await state.update_data(anket_live=message.text)
    await state.set_state(Anket.money)
    
@router.message(Anket.money)
async def stage_anket_money(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏üî¢")
    await state.update_data(anket_trebovania=message.text)
    await state.set_state(Anket.number)
@router.message(Anket.number, F.text.isdigit())
async def stage_anket_number(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.update_data(anket_money=int(message.text))
    await state.set_state(Anket.name)
    
@router.message(Anket.number)
async def stage_anket_number_error(message):
    await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ,–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
    
@router.message(Anket.name)
async def stage_anket_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    await state.update_data(anket_phone=message.text)
    await state.set_state(Anket.info)

    #result={}
    #dct=await state.get_data()
    #for dddd in ["ccity","housee","roomss","livee","trebovaniaa","Moneyy","nomderr","nameeee"]:
        #result.update({dddd:dct[dddd]})
    #await bot.send_message(chat_id=int(os.getenv('ADMIN')), text=str(result))
    #await message.answer("–°–ø–∞—Å–∏–±–æ —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è,–Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /saw,—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

@router.message(Anket.info)
async def stage_anket_info(message,state):
    await state.update_data(anket_name=message.text)
    #user_dict[message.from_user.id]=await state.get_data()
    user_dict = await state.get_data()
    info = f"""–ì–æ—Ä–æ–¥: {user_dict['anket_city']}
 –¢–∏–ø: {user_dict['anket_house']}
 –ö–æ–º–Ω–∞—Ç—ã: {user_dict['anket_rooms']}
 –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ: {user_dict['anket_live']}
 –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {user_dict['anket_trebovania']}
 –ë—é–¥–∂–µ—Ç: {user_dict['anket_money']}
 –ò–º—è: {user_dict['anket_name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_dict['anket_phone']}"""
    await message.answer(text=f'–°–ø–∞—Å–∏–±–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:\n\n{info}',
                        reply_markup=builders.inline_kb(('–í–µ—Ä–Ω–æ', '–ù–µ–≤–µ—Ä–Ω–æ')))
    await state.set_state(Anket.end)

@router.callback_query(Anket.end, F.data.in_(['–í–µ—Ä–Ω–æ','–ù–µ–≤–µ—Ä–Ω–æ']))
async def end_anket(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–í–µ—Ä–Ω–æ':
        user_dict = await state.get_data()
        jj = {'chat_id': int(callback.message.chat.id), 'updat'}
        if user_dict['want'] == "–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏":
            await state.update_data(is_arenda=1)
            jj.update({'is_arenda': 1})
        elif user_dict['want'] == "–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏":
            await state.update_data(is_buy=1)
            jj.update({'is_buy': 1})
            
        info = f"""–ì–æ—Ä–æ–¥: {user_dict['anket_city']}\n
 –¢–∏–ø: {user_dict['anket_house']}\n
 –ö–æ–º–Ω–∞—Ç—ã: {user_dict['anket_rooms']}\n
 –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ: {user_dict['anket_live']}\n
 –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {user_dict['anket_trebovania']}\n
 –ë—é–¥–∂–µ—Ç: {user_dict['anket_money']}\n
 –ò–º—è: {user_dict['anket_name']}\n
–¢–µ–ª–µ—Ñ–æ–Ω: {user_dict['anket_phone']}"""
        
        for k, v in user_dict.items():
            if k.startswith('anket'):
                jj.update({k: v})

        await add_info(jj)
        for adm in os.getenv('ADMIN').split(','):
            await callback.message.bot.send_message(
                chat_id=adm, 
                text=info,
            )
        #await callback.message.bot.send_message(chat_id=os.getenv('ADMIN'), text=info)
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!')
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                      reply_markup=builders.form_without(nedvig.keys()))
        await state.set_state(default_state)
        await callback.answer()
    else:
        await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏–µ –∞–Ω–∫–µ—Ç—É –µ—â—ë —Ä–∞–∑')
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥")
        await state.set_state(Anket.city)
        await callback.answer()

@router.callback_query(Anket.end)
async def end_anket_error(callback: CallbackQuery):
    await callback.message.answer(text=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:',
        reply_markup=builders.inline_kb(('–í–µ—Ä–Ω–æ', '–ù–µ–≤–µ—Ä–Ω–æ')))



