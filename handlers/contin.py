from data.states import Anket, TELEPHONE, Sell, Regre_form
from aiogram import Router, F
from data.book import nedvig
from aiogram.types import Message, CallbackQuery
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from filters.repeat import CheckRepeat
from keyboard.builders import *
from data.book import nedvig
from aiogram.filters import or_f, and_f

router=Router()

@router.message(
    F.text.in_((
        "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
        "–¢–ì –∫–∞–Ω–∞–ª",
        "–û –∫–æ–º–ø–∞–Ω–∏–∏",
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    ))
)
async def book_info(message: Message,state: FSMContext):
    txt=message.text
    if txt == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–πüì≤", 
                reply_markup=inline_btn("–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–πüíª",
                                        nedvig["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]))
    elif txt =="–¢–ì –∫–∞–Ω–∞–ª":
        await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¢–ì –∫–∞–Ω–∞–ªüîî ", 
                reply_markup=inline_btn("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ªüì≤",
                                        "https://t.me/nedvig777"))
    elif txt == "–û –∫–æ–º–ø–∞–Ω–∏–∏":
        send=nedvig["–û –∫–æ–º–ø–∞–Ω–∏–∏"]
        await message.answer(send)
        
    elif message.text  == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        await state.set_state(Regre_form.number)
        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", 
                            reply_markup=ReplyKeyboardRemove())
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è')
    
@router.message(
    CheckRepeat('is_reg'),
    or_f(
        and_f(
            CheckRepeat('is_arenda'),
            F.text == "–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"     
        ),
        and_f(
            CheckRepeat('is_buy'),
            F.text == "–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"     
        ),
        and_f(
            CheckRepeat('is_sell'),
            F.text == "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
        )
    )
)
async def ask_rewrite(message: Message, state: FSMContext):
    await state.update_data(want=message.text)
    await message.answer(text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å?",
                        reply_markup=inline_kb(["–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", 
                                                "–û—Ç–º–µ–Ω–∞"]))

@router.callback_query(
    CheckRepeat('is_reg'), 
    F.data.in_(["–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", "–û—Ç–º–µ–Ω–∞"])
)
async def rewrite_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å":
        await stage_continue_old(callback.message, state)
        '''
        a = await state.get_data()
        if a['want'] in ("–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"):
            await state.set_state(Anket.city)
        elif a['want'] == "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏":
            await state.set_state(Sell.city)
        await callback.message.answer(text='–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                                     reply_markup=ReplyKeyboardRemove())
        await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
        '''
    elif callback.data == "–û—Ç–º–µ–Ω–∞":
        await callback.message.answer('–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                      reply_markup=form_without(nedvig.keys()))

        
@router.message(
    CheckRepeat('is_reg'),
    or_f(
        and_f(
            ~CheckRepeat('is_arenda'),
            F.text == "–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"     
        ),
        and_f(
            ~CheckRepeat('is_buy'),
            F.text == "–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
        ),
        and_f(
            ~CheckRepeat('is_sell'),
            F.text == "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
        )
    )
)
async def stage_continue_old(message: Message, state: FSMContext):
    txt=message.text
    await state.update_data(want=txt)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ö–∞–∫ –í—ã —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å‚ùì',
                             reply_markup=inline_kb(["–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫üì±",
                                                     "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìï"]))

@router.callback_query(
    CheckRepeat('is_reg'), 
    F.data == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—Éüìï"
)
async def ask_continue_old(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    a = await state.get_data()
    if a['want'] in ("–ê—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"):
        await state.set_state(Anket.city)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∞—Ä–µ–Ω–¥—ã/–ø–æ–∫—É–ø–∫–∏",
                                     reply_markup=ReplyKeyboardRemove())

    elif a['want'] == "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏":
        await state.set_state(Sell.city)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–¥–∞–∂–∏",
                                     reply_markup=ReplyKeyboardRemove())

@router.callback_query(
    CheckRepeat('is_reg'),
    F.data == "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫üì±"
)
async def phone_continue_old(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(TELEPHONE.telephone)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è",
                                 reply_markup=ReplyKeyboardRemove())
    




